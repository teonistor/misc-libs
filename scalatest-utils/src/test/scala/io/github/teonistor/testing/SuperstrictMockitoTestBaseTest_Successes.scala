package io.github.teonistor.testing

import org.apache.commons.lang3.RandomStringUtils.randomAlphabetic
import org.apache.commons.lang3.RandomUtils.{nextBoolean, nextInt}
import org.mockito.BDDMockito.given

class SuperstrictMockitoTestBaseTest_Successes extends SuperstrictMockitoTestBase {

  // Examples why we set off to do this in the first place

  test("Mockito by itself doesn't complain about unused stubs") {
    val func = mock[String => String]
    given(func("Banana")).willReturn("Split")
  }

  test("Mockito by itself doesn't complain about misstubbing") {
    val func = mock[String => String]
    given(func("Banana")).willReturn("Split")
    assert(func("Apple") == null)
  }

  test("Mockito by itself doesn't complain about extra interactions") {
    val func = mock[String => String]
    assert(func("Apple") == null)
  }

  // 1 to X mock methods generated by code at the bottom

  mockitoTest("Assisted Mockito with 1 mocks", classOf[String => Int])(func1 => {
    given(func1("yBrcLCk")).willReturn(976)

    assert(func1("yBrcLCk") == 976)
  })

  mockitoTest("Assisted Mockito with 2 mocks", classOf[String => Int], classOf[String => Int])((func1, func2) => {
    given(func1("tAbmVuK")).willReturn(772)
    given(func2("hpuuSsc")).willReturn(37)

    assert(func1("tAbmVuK") == 772)
    assert(func2("hpuuSsc") == 37)
  })

  mockitoTest("Assisted Mockito with 3 mocks", classOf[Int => Int], classOf[String => String], classOf[Int => String])((func1, func2, func3) => {
    given(func1(91)).willReturn(109)
    given(func2("eLvydln")).willReturn("VggFrdY")
    given(func3(962)).willReturn("MGOXUcP")

    assert(func1(91) == 109)
    assert(func2("eLvydln") == "VggFrdY")
    assert(func3(962) == "MGOXUcP")
  })

  mockitoTest("Assisted Mockito with 4 mocks", classOf[Int => String], classOf[String => Int], classOf[String => String], classOf[String => Int])((func1, func2, func3, func4) => {
    given(func1(635)).willReturn("NnSIUnq")
    given(func2("jsMErCS")).willReturn(919)
    given(func3("eCVScDs")).willReturn("RHYXMRX")
    given(func4("ZvvPyjg")).willReturn(878)

    assert(func1(635) == "NnSIUnq")
    assert(func2("jsMErCS") == 919)
    assert(func3("eCVScDs") == "RHYXMRX")
    assert(func4("ZvvPyjg") == 878)
  })

  mockitoTest("Assisted Mockito with 5 mocks", classOf[Int => Int], classOf[Int => Int], classOf[Int => String], classOf[String => Int], classOf[String => Int])((func1, func2, func3, func4, func5) => {
    given(func1(43)).willReturn(128)
    given(func2(811)).willReturn(600)
    given(func3(965)).willReturn("XAugLPl")
    given(func4("KHkMfZe")).willReturn(579)
    given(func5("HiikEEM")).willReturn(225)

    assert(func1(43) == 128)
    assert(func2(811) == 600)
    assert(func3(965) == "XAugLPl")
    assert(func4("KHkMfZe") == 579)
    assert(func5("HiikEEM") == 225)
  })

  mockitoTest("Assisted Mockito with 6 mocks", classOf[Int => Int], classOf[Int => Int], classOf[String => Int], classOf[String => Int], classOf[String => Int], classOf[Int => Int])((func1, func2, func3, func4, func5, func6) => {
    given(func1(455)).willReturn(409)
    given(func2(794)).willReturn(706)
    given(func3("RQDwIrB")).willReturn(470)
    given(func4("tfXlggg")).willReturn(675)
    given(func5("qguIuNt")).willReturn(227)
    given(func6(741)).willReturn(737)

    assert(func1(455) == 409)
    assert(func2(794) == 706)
    assert(func3("RQDwIrB") == 470)
    assert(func4("tfXlggg") == 675)
    assert(func5("qguIuNt") == 227)
    assert(func6(741) == 737)
  })

  mockitoTest("Assisted Mockito with 7 mocks", classOf[Int => String], classOf[Int => String], classOf[Int => Int], classOf[String => Int], classOf[Int => Int], classOf[String => Int], classOf[Int => String])((func1, func2, func3, func4, func5, func6, func7) => {
    given(func1(906)).willReturn("BIUJxVu")
    given(func2(377)).willReturn("DECZSgt")
    given(func3(691)).willReturn(637)
    given(func4("ZxTHQyj")).willReturn(614)
    given(func5(929)).willReturn(155)
    given(func6("VABNxAH")).willReturn(140)
    given(func7(312)).willReturn("UtTEOUv")

    assert(func1(906) == "BIUJxVu")
    assert(func2(377) == "DECZSgt")
    assert(func3(691) == 637)
    assert(func4("ZxTHQyj") == 614)
    assert(func5(929) == 155)
    assert(func6("VABNxAH") == 140)
    assert(func7(312) == "UtTEOUv")
  })

  mockitoTest("Assisted Mockito with 8 mocks", classOf[String => String], classOf[String => Int], classOf[String => Int], classOf[Int => Int], classOf[Int => String], classOf[String => Int], classOf[Int => String], classOf[Int => Int])((func1, func2, func3, func4, func5, func6, func7, func8) => {
    given(func1("ClzAQMF")).willReturn("DcUfsYn")
    given(func2("wakKNmq")).willReturn(991)
    given(func3("HuWCsIt")).willReturn(455)
    given(func4(706)).willReturn(878)
    given(func5(763)).willReturn("gvZENes")
    given(func6("FvFaRoL")).willReturn(418)
    given(func7(333)).willReturn("QJPgULY")
    given(func8(963)).willReturn(483)

    assert(func1("ClzAQMF") == "DcUfsYn")
    assert(func2("wakKNmq") == 991)
    assert(func3("HuWCsIt") == 455)
    assert(func4(706) == 878)
    assert(func5(763) == "gvZENes")
    assert(func6("FvFaRoL") == 418)
    assert(func7(333) == "QJPgULY")
    assert(func8(963) == 483)
  })

  mockitoTest("Assisted Mockito with 9 mocks", classOf[String => String], classOf[Int => Int], classOf[String => String], classOf[String => String], classOf[String => Int], classOf[Int => String], classOf[String => String], classOf[Int => String], classOf[Int => Int])((func1, func2, func3, func4, func5, func6, func7, func8, func9) => {
    given(func1("rFBUYWD")).willReturn("yQMLFjY")
    given(func2(861)).willReturn(209)
    given(func3("kmYGfBB")).willReturn("GjPusJM")
    given(func4("kYLYNNX")).willReturn("MYNdVef")
    given(func5("mlgZYpp")).willReturn(791)
    given(func6(595)).willReturn("PscSTKw")
    given(func7("WBlBECG")).willReturn("zdKgQRi")
    given(func8(523)).willReturn("zLLvvlu")
    given(func9(400)).willReturn(897)

    assert(func1("rFBUYWD") == "yQMLFjY")
    assert(func2(861) == 209)
    assert(func3("kmYGfBB") == "GjPusJM")
    assert(func4("kYLYNNX") == "MYNdVef")
    assert(func5("mlgZYpp") == 791)
    assert(func6(595) == "PscSTKw")
    assert(func7("WBlBECG") == "zdKgQRi")
    assert(func8(523) == "zLLvvlu")
    assert(func9(400) == 897)
  })

  mockitoTest("Assisted Mockito with 10 mocks", classOf[Int => String], classOf[Int => String], classOf[String => String], classOf[Int => Int], classOf[Int => Int], classOf[String => Int], classOf[Int => String], classOf[String => Int], classOf[String => Int], classOf[String => String])((func1, func2, func3, func4, func5, func6, func7, func8, func9, func10) => {
    given(func1(974)).willReturn("dcDViXU")
    given(func2(29)).willReturn("zKfOwkK")
    given(func3("kVXgZjM")).willReturn("cICUvEb")
    given(func4(758)).willReturn(456)
    given(func5(285)).willReturn(947)
    given(func6("UhByvBh")).willReturn(571)
    given(func7(32)).willReturn("sZqgLmg")
    given(func8("eQEqCGA")).willReturn(623)
    given(func9("aicPuFj")).willReturn(378)
    given(func10("bGmfiFz")).willReturn("KDampoU")

    assert(func1(974) == "dcDViXU")
    assert(func2(29) == "zKfOwkK")
    assert(func3("kVXgZjM") == "cICUvEb")
    assert(func4(758) == 456)
    assert(func5(285) == 947)
    assert(func6("UhByvBh") == 571)
    assert(func7(32) == "sZqgLmg")
    assert(func8("eQEqCGA") == 623)
    assert(func9("aicPuFj") == 378)
    assert(func10("bGmfiFz") == "KDampoU")
  })

  mockitoTest("Assisted Mockito with 11 mocks", classOf[Int => String], classOf[Int => String], classOf[Int => Int], classOf[Int => String], classOf[String => Int], classOf[String => String], classOf[Int => String], classOf[String => String], classOf[String => String], classOf[Int => String], classOf[String => Int])((func1, func2, func3, func4, func5, func6, func7, func8, func9, func10, func11) => {
    given(func1(306)).willReturn("EYkeEgV")
    given(func2(385)).willReturn("HdDDzFa")
    given(func3(582)).willReturn(117)
    given(func4(231)).willReturn("OcTtGyW")
    given(func5("XixUaxX")).willReturn(349)
    given(func6("uDKYcxd")).willReturn("zLpTcYk")
    given(func7(409)).willReturn("vbSWXjx")
    given(func8("ZStHCaR")).willReturn("wNLUSDj")
    given(func9("rhzOnoN")).willReturn("GpgpCbB")
    given(func10(822)).willReturn("BGLAEhL")
    given(func11("UmKiXou")).willReturn(855)

    assert(func1(306) == "EYkeEgV")
    assert(func2(385) == "HdDDzFa")
    assert(func3(582) == 117)
    assert(func4(231) == "OcTtGyW")
    assert(func5("XixUaxX") == 349)
    assert(func6("uDKYcxd") == "zLpTcYk")
    assert(func7(409) == "vbSWXjx")
    assert(func8("ZStHCaR") == "wNLUSDj")
    assert(func9("rhzOnoN") == "GpgpCbB")
    assert(func10(822) == "BGLAEhL")
    assert(func11("UmKiXou") == 855)
  })

  mockitoTest("Assisted Mockito with 12 mocks", classOf[Int => Int], classOf[String => String], classOf[String => String], classOf[Int => String], classOf[String => String], classOf[Int => String], classOf[Int => Int], classOf[Int => String], classOf[Int => String], classOf[String => Int], classOf[String => Int], classOf[String => String])((func1, func2, func3, func4, func5, func6, func7, func8, func9, func10, func11, func12) => {
    given(func1(623)).willReturn(36)
    given(func2("shVlQrm")).willReturn("MvMRsYm")
    given(func3("YuTZUKJ")).willReturn("xLSGmCF")
    given(func4(62)).willReturn("CAYUaaY")
    given(func5("SgKMyIR")).willReturn("GTwLLdi")
    given(func6(447)).willReturn("XGGuYVX")
    given(func7(411)).willReturn(957)
    given(func8(808)).willReturn("afPTlrh")
    given(func9(630)).willReturn("DwstADC")
    given(func10("dAwSoXm")).willReturn(795)
    given(func11("XgyOJwo")).willReturn(833)
    given(func12("WtfjWTV")).willReturn("CUhnfPR")

    assert(func1(623) == 36)
    assert(func2("shVlQrm") == "MvMRsYm")
    assert(func3("YuTZUKJ") == "xLSGmCF")
    assert(func4(62) == "CAYUaaY")
    assert(func5("SgKMyIR") == "GTwLLdi")
    assert(func6(447) == "XGGuYVX")
    assert(func7(411) == 957)
    assert(func8(808) == "afPTlrh")
    assert(func9(630) == "DwstADC")
    assert(func10("dAwSoXm") == 795)
    assert(func11("XgyOJwo") == 833)
    assert(func12("WtfjWTV") == "CUhnfPR")
  })

  mockitoTest("Assisted Mockito with 13 mocks", classOf[String => Int], classOf[String => Int], classOf[Int => String], classOf[Int => String], classOf[Int => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[Int => Int], classOf[Int => String], classOf[String => String], classOf[Int => String], classOf[String => String])((func1, func2, func3, func4, func5, func6, func7, func8, func9, func10, func11, func12, func13) => {
    given(func1("WtBFdyc")).willReturn(214)
    given(func2("qCYRWfn")).willReturn(686)
    given(func3(552)).willReturn("yuCgPAM")
    given(func4(570)).willReturn("xFpaWvy")
    given(func5(741)).willReturn("CajVqlI")
    given(func6("cjNuhlH")).willReturn("McisGnD")
    given(func7("NtfRnQT")).willReturn("LTplwfE")
    given(func8("dmIycWV")).willReturn("vVRUNcT")
    given(func9(885)).willReturn(963)
    given(func10(244)).willReturn("ljIWiKW")
    given(func11("ngkItYF")).willReturn("lNgOgHp")
    given(func12(554)).willReturn("oTteyII")
    given(func13("RReedXj")).willReturn("wqtucOC")

    assert(func1("WtBFdyc") == 214)
    assert(func2("qCYRWfn") == 686)
    assert(func3(552) == "yuCgPAM")
    assert(func4(570) == "xFpaWvy")
    assert(func5(741) == "CajVqlI")
    assert(func6("cjNuhlH") == "McisGnD")
    assert(func7("NtfRnQT") == "LTplwfE")
    assert(func8("dmIycWV") == "vVRUNcT")
    assert(func9(885) == 963)
    assert(func10(244) == "ljIWiKW")
    assert(func11("ngkItYF") == "lNgOgHp")
    assert(func12(554) == "oTteyII")
    assert(func13("RReedXj") == "wqtucOC")
  })

  mockitoTest("Assisted Mockito with 14 mocks", classOf[Int => String], classOf[String => String], classOf[String => String], classOf[Int => String], classOf[String => String], classOf[String => String], classOf[Int => Int], classOf[String => Int], classOf[String => String], classOf[Int => String], classOf[Int => String], classOf[Int => String], classOf[Int => Int], classOf[Int => String])((func1, func2, func3, func4, func5, func6, func7, func8, func9, func10, func11, func12, func13, func14) => {
    given(func1(157)).willReturn("iFwMPSf")
    given(func2("XjITOPS")).willReturn("QtjyLXb")
    given(func3("lsIjLum")).willReturn("qiVSITA")
    given(func4(414)).willReturn("KNYtiak")
    given(func5("HGrPumE")).willReturn("kXwRfXZ")
    given(func6("UHjbXtR")).willReturn("mIzvKXX")
    given(func7(515)).willReturn(242)
    given(func8("uHzKdEF")).willReturn(444)
    given(func9("AdPltbA")).willReturn("SFpGXeT")
    given(func10(766)).willReturn("eIARssB")
    given(func11(636)).willReturn("lOkqzQp")
    given(func12(272)).willReturn("ZaAyUvd")
    given(func13(793)).willReturn(391)
    given(func14(785)).willReturn("hpCjmsT")

    assert(func1(157) == "iFwMPSf")
    assert(func2("XjITOPS") == "QtjyLXb")
    assert(func3("lsIjLum") == "qiVSITA")
    assert(func4(414) == "KNYtiak")
    assert(func5("HGrPumE") == "kXwRfXZ")
    assert(func6("UHjbXtR") == "mIzvKXX")
    assert(func7(515) == 242)
    assert(func8("uHzKdEF") == 444)
    assert(func9("AdPltbA") == "SFpGXeT")
    assert(func10(766) == "eIARssB")
    assert(func11(636) == "lOkqzQp")
    assert(func12(272) == "ZaAyUvd")
    assert(func13(793) == 391)
    assert(func14(785) == "hpCjmsT")
  })

  mockitoTest("Assisted Mockito with 15 mocks", classOf[String => Int], classOf[String => String], classOf[Int => String], classOf[Int => Int], classOf[String => String], classOf[Int => Int], classOf[Int => Int], classOf[String => String], classOf[String => Int], classOf[String => String], classOf[Int => String], classOf[String => String], classOf[Int => Int], classOf[String => String], classOf[Int => String])((func1, func2, func3, func4, func5, func6, func7, func8, func9, func10, func11, func12, func13, func14, func15) => {
    given(func1("ljfsVmw")).willReturn(172)
    given(func2("ylCzGLT")).willReturn("SrddSih")
    given(func3(801)).willReturn("sbSgBms")
    given(func4(777)).willReturn(206)
    given(func5("ZmrrvsL")).willReturn("gNCoTjh")
    given(func6(99)).willReturn(41)
    given(func7(927)).willReturn(444)
    given(func8("UqKabOh")).willReturn("AhJmSuV")
    given(func9("oFyBqNq")).willReturn(764)
    given(func10("JmKDfIO")).willReturn("QWcHYsr")
    given(func11(723)).willReturn("AZXlcDE")
    given(func12("SdrRRLi")).willReturn("uYvOKuz")
    given(func13(728)).willReturn(184)
    given(func14("kOVeXIS")).willReturn("qWkzGyA")
    given(func15(326)).willReturn("jkEpTbb")

    assert(func1("ljfsVmw") == 172)
    assert(func2("ylCzGLT") == "SrddSih")
    assert(func3(801) == "sbSgBms")
    assert(func4(777) == 206)
    assert(func5("ZmrrvsL") == "gNCoTjh")
    assert(func6(99) == 41)
    assert(func7(927) == 444)
    assert(func8("UqKabOh") == "AhJmSuV")
    assert(func9("oFyBqNq") == 764)
    assert(func10("JmKDfIO") == "QWcHYsr")
    assert(func11(723) == "AZXlcDE")
    assert(func12("SdrRRLi") == "uYvOKuz")
    assert(func13(728) == 184)
    assert(func14("kOVeXIS") == "qWkzGyA")
    assert(func15(326) == "jkEpTbb")
  })
}

// Uncomment and use responsibly
object SuperstrictMockitoTestBaseTest_Successes {
  def main(arg: Array[String]): Unit = {
    println((1 to SuperstrictMockitoTestBase.howManyBlocks)
      .map(generateCode)
      .mkString("\n"))
  }

  private def generateCode(howManyParams: Int): String ={
    val things = (1 to howManyParams).map(_=> generateTwoThings())

    val classes = things.map(thing => s", classOf[${thing._1} => ${thing._2}]").mkString
    val args = (1 to howManyParams).map(i => s"func$i").mkString(", ")
    val givens = (0 until howManyParams).map(i => s"    given(func${i+1}(${things(i)._3})).willReturn(${things(i)._4})").mkString("\n")
    val asserts = (0 until howManyParams).map(i => s"    assert(func${i+1}(${things(i)._3}) == ${things(i)._4})").mkString("\n")

    s"""  mockitoTest("Assisted Mockito with $howManyParams mocks"$classes)(($args) => {
       |$givens
       |
       |$asserts
       |  })
       |""".stripMargin
  }

  private def generateTwoThings() = {
    val ((one, three), (two, four)) = (generateThing(), generateThing())
    (one, two, three, four)
  }

  private def generateThing() =
    if (nextBoolean())
      ("Int", nextInt(10, 1000).toString)
    else
      ("String", s"\"${randomAlphabetic(7)}\"")
}