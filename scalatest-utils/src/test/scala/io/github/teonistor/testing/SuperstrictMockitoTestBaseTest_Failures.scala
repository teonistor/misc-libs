package io.github.teonistor.testing

import org.mockito.BDDMockito.`given`
import org.mockito.exceptions.base.MockitoException
import org.scalactic.source.Position
import org.scalatest.Tag

class SuperstrictMockitoTestBaseTest_Failures extends SuperstrictMockitoTestBase {

  private var beforeMockitoTestHasRun: Boolean =_
  private var afterMockitoTestHasRun: Boolean =_

  override def beforeEach(): Unit = {
    beforeMockitoTestHasRun = false
    afterMockitoTestHasRun = false
  }

  override def beforeMockitoTest(): Unit = {
    beforeMockitoTestHasRun = true
  }

  // Tests in this class succeed when they fail :)
  override def test(testName: String, tags: Tag*)(body: => Any)(implicit pos: Position): Unit =
    super.test(testName, tags:_*) {
      assertThrows[MockitoException](body)
    } (pos)

  // Zero-mock method slightly different

  mockitoTest("Assisted Mockito complains about unused stubs") {
    assert(beforeMockitoTestHasRun)
    assert(!afterMockitoTestHasRun)
    val func = mock[String => String]
    given(func("Banana")).willReturn("Split")
  }

  mockitoTest("Assisted Mockito complains about misstubbing") {
    val func = mock[String => String]
    given(func("Banana")).willReturn("Split")
    assert(func("Apple") == null)
  }

  mockitoTest("Assisted Mockito complains about extra interactions") {
    val func = mock[String => String]
    assert(func("Apple") == null)
  }

  // 1 to X mock methods generated by code at the bottom

  mockitoTest("Assisted Mockito with 1 mocks complains about unused stubs", classOf[String => String])((func) => {
    assert(beforeMockitoTestHasRun)
    assert(!afterMockitoTestHasRun)
    given(func("Banana")).willReturn("Split")
  })

  mockitoTest("Assisted Mockito with 1 mocks complains about misstubbing", classOf[String => String])((func) => {
    given(func("Banana")).willReturn("Split")
    assert(func("Apple") == null)
  })

  mockitoTest("Assisted Mockito with 1 mocks complains about extra interactions", classOf[String => String])((func) => {
    assert(func("Apple") == null)
  })


  mockitoTest("Assisted Mockito with 2 mocks complains about unused stubs", classOf[String => String], classOf[String => String])((func, _) => {
    assert(beforeMockitoTestHasRun)
    assert(!afterMockitoTestHasRun)
    given(func("Banana")).willReturn("Split")
  })

  mockitoTest("Assisted Mockito with 2 mocks complains about misstubbing", classOf[String => String], classOf[String => String])((func, _) => {
    given(func("Banana")).willReturn("Split")
    assert(func("Apple") == null)
  })

  mockitoTest("Assisted Mockito with 2 mocks complains about extra interactions", classOf[String => String], classOf[String => String])((func, _) => {
    assert(func("Apple") == null)
  })


  mockitoTest("Assisted Mockito with 3 mocks complains about unused stubs", classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _) => {
    assert(beforeMockitoTestHasRun)
    assert(!afterMockitoTestHasRun)
    given(func("Banana")).willReturn("Split")
  })

  mockitoTest("Assisted Mockito with 3 mocks complains about misstubbing", classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _) => {
    given(func("Banana")).willReturn("Split")
    assert(func("Apple") == null)
  })

  mockitoTest("Assisted Mockito with 3 mocks complains about extra interactions", classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _) => {
    assert(func("Apple") == null)
  })


  mockitoTest("Assisted Mockito with 4 mocks complains about unused stubs", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _) => {
    assert(beforeMockitoTestHasRun)
    assert(!afterMockitoTestHasRun)
    given(func("Banana")).willReturn("Split")
  })

  mockitoTest("Assisted Mockito with 4 mocks complains about misstubbing", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _) => {
    given(func("Banana")).willReturn("Split")
    assert(func("Apple") == null)
  })

  mockitoTest("Assisted Mockito with 4 mocks complains about extra interactions", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _) => {
    assert(func("Apple") == null)
  })


  mockitoTest("Assisted Mockito with 5 mocks complains about unused stubs", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _) => {
    assert(beforeMockitoTestHasRun)
    assert(!afterMockitoTestHasRun)
    given(func("Banana")).willReturn("Split")
  })

  mockitoTest("Assisted Mockito with 5 mocks complains about misstubbing", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _) => {
    given(func("Banana")).willReturn("Split")
    assert(func("Apple") == null)
  })

  mockitoTest("Assisted Mockito with 5 mocks complains about extra interactions", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _) => {
    assert(func("Apple") == null)
  })


  mockitoTest("Assisted Mockito with 6 mocks complains about unused stubs", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _) => {
    assert(beforeMockitoTestHasRun)
    assert(!afterMockitoTestHasRun)
    given(func("Banana")).willReturn("Split")
  })

  mockitoTest("Assisted Mockito with 6 mocks complains about misstubbing", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _) => {
    given(func("Banana")).willReturn("Split")
    assert(func("Apple") == null)
  })

  mockitoTest("Assisted Mockito with 6 mocks complains about extra interactions", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _) => {
    assert(func("Apple") == null)
  })


  mockitoTest("Assisted Mockito with 7 mocks complains about unused stubs", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _) => {
    assert(beforeMockitoTestHasRun)
    assert(!afterMockitoTestHasRun)
    given(func("Banana")).willReturn("Split")
  })

  mockitoTest("Assisted Mockito with 7 mocks complains about misstubbing", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _) => {
    given(func("Banana")).willReturn("Split")
    assert(func("Apple") == null)
  })

  mockitoTest("Assisted Mockito with 7 mocks complains about extra interactions", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _) => {
    assert(func("Apple") == null)
  })


  mockitoTest("Assisted Mockito with 8 mocks complains about unused stubs", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _) => {
    assert(beforeMockitoTestHasRun)
    assert(!afterMockitoTestHasRun)
    given(func("Banana")).willReturn("Split")
  })

  mockitoTest("Assisted Mockito with 8 mocks complains about misstubbing", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _) => {
    given(func("Banana")).willReturn("Split")
    assert(func("Apple") == null)
  })

  mockitoTest("Assisted Mockito with 8 mocks complains about extra interactions", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _) => {
    assert(func("Apple") == null)
  })


  mockitoTest("Assisted Mockito with 9 mocks complains about unused stubs", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _) => {
    assert(beforeMockitoTestHasRun)
    assert(!afterMockitoTestHasRun)
    given(func("Banana")).willReturn("Split")
  })

  mockitoTest("Assisted Mockito with 9 mocks complains about misstubbing", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _) => {
    given(func("Banana")).willReturn("Split")
    assert(func("Apple") == null)
  })

  mockitoTest("Assisted Mockito with 9 mocks complains about extra interactions", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _) => {
    assert(func("Apple") == null)
  })


  mockitoTest("Assisted Mockito with 10 mocks complains about unused stubs", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _, _) => {
    assert(beforeMockitoTestHasRun)
    assert(!afterMockitoTestHasRun)
    given(func("Banana")).willReturn("Split")
  })

  mockitoTest("Assisted Mockito with 10 mocks complains about misstubbing", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _, _) => {
    given(func("Banana")).willReturn("Split")
    assert(func("Apple") == null)
  })

  mockitoTest("Assisted Mockito with 10 mocks complains about extra interactions", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _, _) => {
    assert(func("Apple") == null)
  })


  mockitoTest("Assisted Mockito with 11 mocks complains about unused stubs", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _, _, _) => {
    assert(beforeMockitoTestHasRun)
    assert(!afterMockitoTestHasRun)
    given(func("Banana")).willReturn("Split")
  })

  mockitoTest("Assisted Mockito with 11 mocks complains about misstubbing", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _, _, _) => {
    given(func("Banana")).willReturn("Split")
    assert(func("Apple") == null)
  })

  mockitoTest("Assisted Mockito with 11 mocks complains about extra interactions", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _, _, _) => {
    assert(func("Apple") == null)
  })


  mockitoTest("Assisted Mockito with 12 mocks complains about unused stubs", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _, _, _, _) => {
    assert(beforeMockitoTestHasRun)
    assert(!afterMockitoTestHasRun)
    given(func("Banana")).willReturn("Split")
  })

  mockitoTest("Assisted Mockito with 12 mocks complains about misstubbing", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _, _, _, _) => {
    given(func("Banana")).willReturn("Split")
    assert(func("Apple") == null)
  })

  mockitoTest("Assisted Mockito with 12 mocks complains about extra interactions", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _, _, _, _) => {
    assert(func("Apple") == null)
  })


  mockitoTest("Assisted Mockito with 13 mocks complains about unused stubs", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _, _, _, _, _) => {
    assert(beforeMockitoTestHasRun)
    assert(!afterMockitoTestHasRun)
    given(func("Banana")).willReturn("Split")
  })

  mockitoTest("Assisted Mockito with 13 mocks complains about misstubbing", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _, _, _, _, _) => {
    given(func("Banana")).willReturn("Split")
    assert(func("Apple") == null)
  })

  mockitoTest("Assisted Mockito with 13 mocks complains about extra interactions", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _, _, _, _, _) => {
    assert(func("Apple") == null)
  })


  mockitoTest("Assisted Mockito with 14 mocks complains about unused stubs", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _, _, _, _, _, _) => {
    assert(beforeMockitoTestHasRun)
    assert(!afterMockitoTestHasRun)
    given(func("Banana")).willReturn("Split")
  })

  mockitoTest("Assisted Mockito with 14 mocks complains about misstubbing", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _, _, _, _, _, _) => {
    given(func("Banana")).willReturn("Split")
    assert(func("Apple") == null)
  })

  mockitoTest("Assisted Mockito with 14 mocks complains about extra interactions", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _, _, _, _, _, _) => {
    assert(func("Apple") == null)
  })


  mockitoTest("Assisted Mockito with 15 mocks complains about unused stubs", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _, _, _, _, _, _, _) => {
    assert(beforeMockitoTestHasRun)
    assert(!afterMockitoTestHasRun)
    given(func("Banana")).willReturn("Split")
  })

  mockitoTest("Assisted Mockito with 15 mocks complains about misstubbing", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _, _, _, _, _, _, _) => {
    given(func("Banana")).willReturn("Split")
    assert(func("Apple") == null)
  })

  mockitoTest("Assisted Mockito with 15 mocks complains about extra interactions", classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String], classOf[String => String])((func, _, _, _, _, _, _, _, _, _, _, _, _, _, _) => {
    assert(func("Apple") == null)
  })


  override def afterMockitoTest(): Unit = {
    afterMockitoTestHasRun = true
  }

  override def afterEach(): Unit = {
    assert(beforeMockitoTestHasRun)
    assert(afterMockitoTestHasRun)
  }
}

// Uncomment and use responsibly
object SuperstrictMockitoTestBaseTest_Failures {
  def main(arg: Array[String]): Unit = {
    println((1 to SuperstrictMockitoTestBase.howManyBlocks)
      .map(generateCode)
      .mkString("\n\n"))
  }

  private def generateCode(howManyParams: Int): String ={
    val classes = ", classOf[String => String]" * howManyParams
    val extraArgs = ", _" * (howManyParams - 1)

    s"""  mockitoTest("Assisted Mockito with $howManyParams mocks complains about unused stubs"$classes)((func$extraArgs) => {
       |    assert(beforeMockitoTestHasRun)
       |    assert(!afterMockitoTestHasRun)
       |    given(func("Banana")).willReturn("Split")
       |  })
       |
       |  mockitoTest("Assisted Mockito with $howManyParams mocks complains about misstubbing"$classes)((func$extraArgs) => {
       |    given(func("Banana")).willReturn("Split")
       |    assert(func("Apple") == null)
       |  })
       |
       |  mockitoTest("Assisted Mockito with $howManyParams mocks complains about extra interactions"$classes)((func$extraArgs) => {
       |    assert(func("Apple") == null)
       |  })
       |""".stripMargin
  }
}
